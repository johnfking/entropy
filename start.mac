|*********************************************************************
 * entropy
 * entropy.mac
 * "I am here because your gods found you lacking."
 *
 * evil overlord:
 *  exspes007
 * evil overlord advisors:
 *  Knightly, dannuic, Saar, thatguy, Crack, Madix, alynel
 *
 * plugins Required: MQ2Collections, MQ2Nav, MQ2SQLite, MQ2DanNet, MQ2MoveUtils, MQ2Lua
 *
 * 
 *
 * Donations: paypal.me/exspes
 ***|



#warning
#turbo 240
#engine parser 2

#define ECHO /echo
#define DEBUG "/if (${_debug}) ECHO \a-p:\ax\aw${Time.Second}\ax\a-p:\ax\aw${Macro.CurLine}\ax\a-p:\ax\a-t${Macro.RunTime}\ax\a-p:\ax"
#define SDEBUG "ECHO \ay+[\ax\aw${Time.Second}\ax\at::\ax\aw${Macro.CurLine}\ax\ay]\ax(\a-t${Macro.RunTime}\ax) \ay--\ax "
#define EDEBUG "/if (${maDebug.Find[event].Value}) ECHO \a-p:\ax\aw${Time.Second}\ax\a-p:\ax\aw${Macro.CurLine}\ax\a-p:\ax\a-t${Macro.RunTime}\ax\a-p:\ax${sep}\a-t----\ax${submenu}"
#define OUT ECHO ${If[${Bool[${Plugin[MQ2Discord]}]},\at-\ax,]}
#define GETINPUT "/call get_input"
#define ISMEDEAD "/if (${is_me_dead[${maDebug.Find[rez].Value}]}) /call check_for_rezbox ${maDebug.Find[rez].Value}"
#define CHECKDEAD "/if (${is_me_dead[${maDebug.Find[rez].Value}]}) /return FALSE"
#define CHECKEXIT "/if (${check_exit[${maDebug.Find[exit].Value}]}) /return"
#define CHECKREZ "/if (${maEnv.Find[swAuto].Value} && !${maPull.Find[swPull].Value} && !${Me.Invis}) /call check_for_corpse ${maDebug.Find[rez].Value}"
#define CHECKFADE "/if (${maChr.Find[stPctFade].Value}) /call cast_AA_fade ${maDebug.Find[fade].Value}"
#define OVERLOS "${If[${maOver.Find[swOverLOS].Value},,los]}"
#define PS4 playerstate 4
#define AUTO ${maEnv.Find[swAuto].Value}
#define ENV ${maEnv.Find[stEnvRadius].Value}
#define PULL ${maPull.Find[swPull].Value}
#define AGRO ${maAgro.Find[swAgro].Value}
#define TARGET ${stAssTarID}
#define TIE ${maTie.Find[swSetTie].Value}
#define HOME ${maHome.Find[swHomeMarker].Value}
#define VALID ${maCC.Find[swValidAssTarID].Value}
#define COMBAT ${maCC.Find[swSetCombat].Value}
#define SAFEZONE ${maEnv.Find[swZoneSafe].Value}
#define BURN ${maBurn.Find[swBurnConditionMet].Value}
#define PCTHO ${tmpHealAdjust}
#define PCTREST ${maRest.Find[stPctRest].Value}
#define SAFEENV ${maEnv.Find[stEnvSafeRadius].Value}
#define RESTENV ${maRest.Find[stRestRadius].Value}
#define PULLENV ${maPull.Find[stPullRadius].Value}
#define AE# ${maChr.Find[stCountAE].Value}
#define PET ${maMinion.Find[swPet].Value}
#define SWARM ${maMinion.Find[swSwarm].Value}
#define RANGE ${maCC.Find[swCombatRange].Value}
#define MELEE ${maCC.Find[swCombatMelee].Value}
#define NUKE ${maCC.Find[swCombatNuke].Value}
#define DOT ${maCC.Find[swCombatDoT].Value}
#define HEAL ${maCC.Find[swCombatHeal].Value}
#define CHECKTIE "/if (${maTie.Find[swSetTie].Value} && !${timer_Check_Tie} || ${maTie.Find[swTieBreak].Value} && ${maData.Find[swGetOverHere].Value}) /call set_tie ${maDebug.Find[tie].Value}"
#define GETOVERHERE "/if (${maTie.Find[swTieBreak].Value} && ${maData.Find[swGetOverHere].Value}) /call set_tie ${maDebug.Find[tie].Value}"
#define CHECKCURSOR "/if (${Cursor.ID} && !${timer_Check_Cursor} && ((AUTO && ${maEnv.Find[swAutoInv].Value}) || ${maEntropy.Find[swAutoInvManual].Value})) /call check_cursor ${maDebug.Find[loot].Value}"
#define SETHUD "/call set_hud_data"
#define CHECKDEFENSE  "/call cast_cycle_defense ${maDebug.Find[def].Value}"
#define ENGINE1 ${maEntropy.Find[stEngine].Value.Equal[1]}
#define ENGINE2 ${maEntropy.Find[stEngine].Value.Equal[2]}
#define ENGINE3 ${maEntropy.Find[stEngine].Value.Equal[3]}
#define MERCENARY ${maMercenary.Find[swMercenary].Value}
#define MQCLEAR "/if (${Bool[${Plugin[MQ2ChatWnd]}]}) /mqclear"
#define BUFFNOW "/if (${maBuff.Find[swBuffNow].Value} && !${timer_Check_Buff_Now}) /call check_buff_cycle_now ${maDebug.Find[now].Value}"
#define BUFFTEMP "/if (${maBuff.Find[swBuffTemp].Value} && !${timer_Check_Buff_Temp}) /call check_buff_cycle_temp ${maDebug.Find[temp].Value}"
#define GETASSIST "${get_assist_target[${maDebug.Find[assist].Value}, inline]}"
#define MODE ${swModeToken}
#define BARD ${Select[${Me.Class.ShortName},BRD]}
#define TMPIDDEAD "/if (${target[isdead, ${_tmpID}]}) /return FALSE"
#define SPAWNDEAD "/if (${target[isdead, ${_spawn.ID}]}) /return FALSE"


#include entropy\inc\initialize.inc
#include entropy\inc\common.inc
#include entropy\inc\control.inc
#include entropy\inc\events.inc
#include entropy\inc\mode.inc
#include entropy\data\custom.inc
#include entropy\inc\class.${Me.Class.ShortName.Lower}.inc



|***
 * note: entropy main sub and master loop
 * use: none. auto
 ***|
sub main(string _var1, string _var2, string _var3, string _var4)
  /declare _boottimestart int local ${MacroQuest.Running}
  MQCLEAR

  | Make sure plugins are loaded. kill macro if not
  /if (!${check_plugin[FALSE, TRUE, |MQ2SQLite|MQ2DanNet|Mq2Nav|MQ2MoveUtils|MQ2Collections|MQ2Lua]}) {
    ECHO Make sure the following plugins are loaded
    ECHO \a-wMQ2SQLite, MQ2DanNet, Mq2Nav, MQ2MoveUtils, MQ2Collections, MQ2Lua\ax
    /endmacro
  }

  | forced PREGEN updates
  /declare pregenUpdate bool outer FALSE

  | build the debugs
  /call set_debug FALSE

  | clear bad aliases
  /call delete_conflict_alias FALSE

  | current entropy version #'s
  /call set_data FALSE maEnv build                          map outer 210413.01
  /call set_data FALSE maEnv schema                         map outer 1.45
  /call set_data FALSE maEnv repo                           map outer 210216.01

  | prep macro
  /call prepare_the_end FALSE
  
  | check all mac start options
  /declare _countVar int local 0
  /for _countVar 1 to 4
    /if (${Bool[${_var${_countVar}}]}) {
      /if (${_var${_countVar}.Arg[1,:].Equal[debug]}) {
        /invoke ${maDebug.Add[${_var${_countVar}.Arg[2,:].Lower},TRUE]}
      } else /if (${_var${_countVar}.Arg[1,:].Equal[auto]}) {
        /invoke ${maEnv.Add[swAuto,${_var${_countVar}.Arg[2,:].Upper}]}
      }
    }
  /next _countVar

  | environment notices
  /if (${maEntropy.Find[swMaintenance].Value}) {
    /invoke ${out[0, 0, 1]}
  }
  /if (${maEntropy.Find[swEventsInc].Value}) {
    /invoke ${out[0, 0, 2]}
  }
  
 	/if (${maOver.Find[swOverEnvAuto].Value}) {
 		/invoke ${maEnv.Add[swAuto,TRUE]}
 	}  

  /if (!${timer_Check_Zone_ID}) {
    /call check_zone_id ${maDebug.Find[zone].Value} FALSE
  }

  | echo help on a new build or updates
  /if (${Bool[${maData.Find[stPreviousBuild].Value}]}) {
    /if (${maData.Find[stPreviousBuild].Value.NotEqual[${maEnv.Find[build].Value}]}) {
      /invoke ${out[0, 0, 5]}
    }
  } else /if (!${Bool[${maData.Find[stPreviousBuild].Value}]}) {
    /invoke ${out[0, 0, 5]}
  }

  /if (${maEntropy.Find[swBuildSetRemember].Value}) {
    /call Bind_control_env set ${maEnv.Find[stBuildSetCurrent].Value}
  }

  /invoke ${out[0, "\agReady\ax${sep}\a-w${Math.Calc[((${MacroQuest.Running}-${_boottimestart}) / 10) / 60]}s\ax", 0]}

  | maintenance loop
  /while (${maEntropy.Find[swMaintenance].Value}) {
    GETINPUT main_maintenance_loop swMaintenance|${maEntropy.Find[swMaintenance].Value}
    /if (${maBuff.Find[swBuffNow].Value} && !${timer_Check_Buff_Now}) {
      /call check_buff_cycle_now ${maDebug.Find[now].Value}
    }
    /delay ${maEntropy.Find[stMainLoopDelay].Value}
  }

  | main loop
  /while (!${maEntropy.Find[swMaintenance].Value}) {

    | housekeeping first!
    /if (!${timer_Check_Housekeeping}) {
      /call check_housekeeping ${maDebug.Find[house].Value}
    }

    GETINPUT main_loop swAuto|${maEnv.Find[swAuto].Value}
    ISMEDEAD
    CHECKCURSOR
    SETHUD EMPTY
    CHECKTIE

    | check GTFO conditions
    /if (${maGTFO.Find[swGTFOActive].Value} && !${timer_Check_GTFO}) {
      /call control_GTFO FALSE ${maDebug.Find[gtfo].Value}
    }

    | check food / drink
    /if (!${timer_Check_FoodDrink}) {
      /call check_last_supper ${maDebug.Find[meal].Value}
    }

    | watchspawn
    /if (${maWatch.Find[swWatch].Value} && !${timer_Check_Watch}) {
      /if (${lsWatch.Count}) {
        /call check_watch_spawn ${maDebug.Find[watch].Value}
      }
    }

    | check do now things
    /if (${maBuff.Find[swBuffNow].Value} && !${timer_Check_Buff_Now}) {
      /call check_buff_cycle_now ${maDebug.Find[now].Value}
    }

    | look for buffs to drop
    /if (${maBuff.Find[swDropBuffs].Value} && !${timer_Check_Drop_Buffs}) {
      /call check_drop_buffs ${maDebug.Find[drop].Value}
    }

    | mode check
    /if (!${timer_Check_Mode}) {
      /call check_mode ${maDebug.Find[mode].Value}
    }

    /if (AUTO) {
      SETHUD EMPTY
      ISMEDEAD
      GETINPUT
      CHECKREZ
      CHECKTIE


      | check observers
      /if (!${timer_Check_Observers}) {
        
        /call observer_build ${maDebug.Find[observe].Value} obs_chrwatch add TRUE

        | curing observers
        /if (${maCure.Find[swCureGroup].Value} || ${maCure.Find[swCureCrew].Value}) {
          /call observer_build ${maDebug.Find[observe].Value} obs_cure add
        }
             
      }

      /if (!${timer_Check_Target}) {
        /invoke ${target[isdead, TARGET]}
        /invoke ${set_data_timer[FALSE, Check_Target, RESTART]}
      }

      | sort /heal adj ##
      /if (PCTHO != ${maHeal.Find[stHealAdjust].Value}) {
        /varset tmpHealAdjust ${If[${maHeal.Find[stHealAdjust].Value},${Float[${maHeal.Find[stHealAdjust].Value}].Centi},99.99]}
      }

      | check tribute
      /if (${maEnv.Find[swCheckTribute].Value}) {
        /if (!${timer_Check_Tribute}) /call check_tribute
      }

      | home check
      /if (HOME && !${SpawnCount[npc radius SAFEENV PS4 targetable]}) {
        /call Bind_control_home return
      }

      | rest
      /if (PCTREST) {
        /if (!PULL || (PULL && !${SpawnCount[npc radius ${maEnv.Find[stRestRadius].Value} PS4]})) {
          /call do_rest ${maDebug.Find[rest].Value}
        }
      }

      | check exp
      /if (${maEnv.Find[swCorrectEXPAA].Value}) {
        /if (${maEnv.Find[stLvlMax].Value} && !${timer_Check_EXP_Adjust}) /call check_expaa_adjust FALSE
      }

      | fireworks
      /if (${maEnv.Find[swAAFireworks].Value} && !${timer_Waste_Fireworks}) {
        /call cast_AA_fireworks ${maDebug.Find[fireworks].Value}
      }

      | some sweeet lovin....
      /if (!${timer_Check_Buff_Cycle}) {
        /call check_buff_cycle ${maDebug.Find[buff].Value}
      }
            
      /if (${lsClassMelee.Contains[${Me.Class.ShortName}]}) {
        /if (${Me.PctEndurance} < 32) {
          /call cast_stamina_recovery
        }
      }
      
      | check loot
      /if (AUTO && ${maEnv.Find[stLootMode].Value.NotEqual[off]} && !${timer_Check_Loot} && !${Stick.Active}) {
        /call do_loot ${maDebug.Find[loot].Value}
      }

      | do we pull or assist
      /if (!SAFEZONE) {
        /if (!${Me.Invis} || (${Select[${Me.Class.ShortName},ROG]} && ${maEnv.Find[swSoS].Value})) {
          /call pull_assist_decision ${maDebug.Find[pull].Value}
        }
      }
    }

    /call class_main FALSE
    /delay ${maEntropy.Find[stMainLoopDelay].Value}
    
  }


  :OnExit
  /if (!${MacroQuest.LastCommand.Find[/end]} && !${MacroQuest.LastCommand.Find[/camp]}) {
     /mqlog ${maEnv.Find[build].Value} .. ERROR SOMEWHERE
     /mqlog .. LastCMD: ${MacroQuest.LastCommand}
     /mqlog .. ErrorMsg: ${MacroQuest.Error}
     /mqlog .. DataError: ${MacroQuest.MQ2DataError}
     /mqlog .. SyntaxError: ${MacroQuest.SyntaxError}
     /mqlog .. RunningTime: ${MacroQuest.Running}
  } else {
    /invoke ${out[0, 0, 6]}
    /mqlog ${maEnv.Find[build].Value} .. Clean Exit
  }
  /if (${DanNet.PeerCount[${maEntropy.Find[stEntropyGroup_all].Value}]}) {
    /dleave ${maEntropy.Find[stEntropyGroup_all].Value}
  }
  /endmacro

/return



|***
 * note:  all basic prep routines / data calls
 * use: /call prepare_the_end [DEBUG]
 ***|
sub prepare_the_end(bool _debug)

  /declare _pathDB string local Macros
  /varset _pathDB ${MacroQuest.Path[macros]}

  /declare _pathINI string local Macros
  /varset _pathINI ${MacroQuest.Path[macros]}\entropy

  | character database
  /call set_data ${_debug} FALSE chrID                                   string outer ${MacroQuest.Server.Replace[ ,_].Lower}_${Me.Class.ShortName}_${Me.DisplayName}
  | character database
  /call set_data ${_debug} FALSE DBcharacter                             string outer "${_pathDB}\entropy\data\${chrID}.sqlite"
  | set raw data database
  /call set_data ${_debug} FALSE DBstatic                                string outer "${_pathDB}\entropy\entropy.sqlite"
  | set loot database
  /call set_data ${_debug} FALSE DBloot                                  string outer "${_pathDB}\entropy\data\loot.sqlite"
  | set loot database
  /call set_data ${_debug} FALSE DBnav                                   string outer "${_pathDB}\entropy\data\nav.sqlite"
  | set zone database
  /call set_data ${_debug} FALSE DBzone                                  string outer "${_pathDB}\entropy\data\zone.sqlite"
  | set ini set location
  /call set_data ${_debug} FALSE INIset                                  string outer "${_pathINI}\data\sets.ini"
  | shared database
  /call set_data ${_debug} FALSE DBshared                                string outer "${_pathDB}\entropy\data\shared.sqlite"
  | farmroute location ini
  /call set_data ${_debug} FALSE INIfarmroute                            string outer "${_pathINI}\data\farmroute.ini"

  | /call set_data ${_debug} FALSE INIsqlupdate                            string outer "${_pathINI}\inc\sql_update.ini"



  | load all tag names
  /sqlite query "${DBshared}" qubind SELECT * FROM binds;  

  | fuck MQ2Melee
  /if (${check_plugin[${_debug}, FALSE, |mq2melee]}) {
    /plugin mq2melee unload noauto
  }

  | fuck MQ2Cast as well
  /if (${check_plugin[${_debug}, FALSE, |mq2cast]}) {
    /plugin mq2cast unload noauto
  }

  | and fuck MQ2 REZ most of all
  /if (${check_plugin[${_debug}, FALSE, |mq2rez]}) {
    /plugin mq2rez unload noauto
  }

  | causing conflicts. will readdress it again later
  /if (${check_plugin[${_debug}, FALSE, |mq2ice]}) {
    /plugin mq2ice unload noauto
  }

  | set all initial variables
  /call set_initialize FALSE

  /invoke ${out[0, forced, 20]}

  | pull static data
  /call set_initialize_static_map FALSE

  | map the macro/game environment
  /call set_initial_environment FALSE

  | check zone schema
  /call sql_schema_zone ${maDebug.Find[s_zone].Value}

  | check loot schema
  /call sql_schema_loot ${maDebug.Find[s_loot].Value}

  | check nav schema
  /call sql_schema_nav ${maDebug.Find[s_nav].Value}

  | check character shema
  /call sql_schema_character ${maDebug.Find[s_character].Value}

  | set any custom defines
  /if (${SubDefined[custom_define]}) {
    /call custom_define ${maDebug.Find[define].Value}
  }

  | set all character maps
  /call set_initialize_map_character_environment ${maDebug.Find[init].Value}

  | set dannet requirements
    /if (${DanNet.LocalEcho}) {
      /squelch /dnet localecho ${maEntropy.Find[swLocalEcho].Value}
    }
    /if (${DanNet.CommandEcho}) {
      /squelch /dnet commandecho ${maEntropy.Find[swCommandEcho].Value}
    }
    /if (!${DanNet.FrontDelim}) {
      /squelch /dnet frontdelim ${maEntropy.Find[swFrontDelim].Value}
    }
    /if (${DanNet.FullNames}) {
      /squelch /dnet fullnames ${maEntropy.Find[swFullNames].Value}
    }
    /if (${DanNet.Timeout.NotEqual[${maEntropy.Find[stNetworkTimeout].Value}]}) {
      /squelch /dnet timeout ${maEntropy.Find[stNetworkTimeout].Value}
    }
    /if (${DanNet.Evasive} != ${maEntropy.Find[stNetworkEvasive].Value}) {
      /squelch /dnet evasive ${maEntropy.Find[stNetworkEvasive].Value}
    }
    | /if (${DanNet.EvasiveRefresh} != ${maEntropy.Find[swEvasiveRefresh].Value}) {
      /squelch /dnet evasiverefresh ${maEntropy.Find[swEvasiveRefresh].Value}
    | }
    /if (${DanNet.Expired} != ${maEntropy.Find[stNetworkExpired].Value}) {
      /squelch /dnet expired ${maEntropy.Find[stNetworkExpired].Value}
    }

  | get buffs
  /call set_initialize_map_buffs ${maDebug.Find[init].Value}

  | build maps with 12 counts
  /call set_initialize_map_12 ${maDebug.Find[init].Value} add

  | build maps with 20 counts
  /call set_initialize_map_20 ${maDebug.Find[init].Value} add

  | build maps with 50 counts
  /call set_initialize_map_50 ${maDebug.Find[init].Value} add

  | set any aliases needs
  /call set_alias add ${maDebug.Find[init].Value}

  | create the shared schema
  /call sql_schema_shared ${maDebug.Find[s_shared].Value}

  | set class databits'n-bytes
  /call class_init ${maDebug.Find[init].Value}

  | load epics
  /call set_initialize_class_epic ${maDebug.Find[init].Value}
  
  | set character in crew characters table
  /call crew_check_character ${maDebug.Find[crew].Value} ${Me.DisplayName} TRUE
  
  | check overrides
  /call Bind_control_over startcheck

  | check game cash?
  /call check_free_ingame_cash ${maDebug.Find[init].Value}

  | set hud variables
  /call set_initialize_hud_variables

  | correct the map click spam.
  /squelch /mapclick left alt /nav locyx %y %x |log=off





|**
 /declare _tmpMap map local
 /declare _mi mapiterator local

 /declare _tmpList list local
 /declare _li listiterator local
 /declare _countH int local 0
 /declare _countK int local 0

  /for _countH 1 to ${Math.Calc[${Ini[${INIsqlupdate}].Count[|]} - 1].Int}

    /echo ${Ini[${INIsqlupdate}].Arg[${_countH},|]}

  /next _countH 


}

${Ini[${INIsqlupdate}].Count[|]}


**|















/return TRUE


